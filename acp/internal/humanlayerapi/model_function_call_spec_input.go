/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humanlayerapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FunctionCallSpecInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionCallSpecInput{}

// FunctionCallSpecInput struct for FunctionCallSpecInput
type FunctionCallSpecInput struct {
	Fn            string                      `json:"fn"`
	Kwargs        map[string]interface{}      `json:"kwargs"`
	Channel       NullableContactChannelInput `json:"channel,omitempty"`
	RejectOptions []ResponseOption            `json:"reject_options,omitempty"`
	State         map[string]interface{}      `json:"state,omitempty"`
}

type _FunctionCallSpecInput FunctionCallSpecInput

// NewFunctionCallSpecInput instantiates a new FunctionCallSpecInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionCallSpecInput(fn string, kwargs map[string]interface{}) *FunctionCallSpecInput {
	this := FunctionCallSpecInput{}
	this.Fn = fn
	this.Kwargs = kwargs
	return &this
}

// NewFunctionCallSpecInputWithDefaults instantiates a new FunctionCallSpecInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionCallSpecInputWithDefaults() *FunctionCallSpecInput {
	this := FunctionCallSpecInput{}
	return &this
}

// GetFn returns the Fn field value
func (o *FunctionCallSpecInput) GetFn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fn
}

// GetFnOk returns a tuple with the Fn field value
// and a boolean to check if the value has been set.
func (o *FunctionCallSpecInput) GetFnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fn, true
}

// SetFn sets field value
func (o *FunctionCallSpecInput) SetFn(v string) {
	o.Fn = v
}

// GetKwargs returns the Kwargs field value
func (o *FunctionCallSpecInput) GetKwargs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Kwargs
}

// GetKwargsOk returns a tuple with the Kwargs field value
// and a boolean to check if the value has been set.
func (o *FunctionCallSpecInput) GetKwargsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Kwargs, true
}

// SetKwargs sets field value
func (o *FunctionCallSpecInput) SetKwargs(v map[string]interface{}) {
	o.Kwargs = v
}

// GetChannel returns the Channel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionCallSpecInput) GetChannel() ContactChannelInput {
	if o == nil || IsNil(o.Channel.Get()) {
		var ret ContactChannelInput
		return ret
	}
	return *o.Channel.Get()
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionCallSpecInput) GetChannelOk() (*ContactChannelInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channel.Get(), o.Channel.IsSet()
}

// HasChannel returns a boolean if a field has been set.
func (o *FunctionCallSpecInput) HasChannel() bool {
	if o != nil && o.Channel.IsSet() {
		return true
	}

	return false
}

// SetChannel gets a reference to the given NullableContactChannelInput and assigns it to the Channel field.
func (o *FunctionCallSpecInput) SetChannel(v ContactChannelInput) {
	o.Channel.Set(&v)
}

// SetChannelNil sets the value for Channel to be an explicit nil
func (o *FunctionCallSpecInput) SetChannelNil() {
	o.Channel.Set(nil)
}

// UnsetChannel ensures that no value is present for Channel, not even an explicit nil
func (o *FunctionCallSpecInput) UnsetChannel() {
	o.Channel.Unset()
}

// GetRejectOptions returns the RejectOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionCallSpecInput) GetRejectOptions() []ResponseOption {
	if o == nil {
		var ret []ResponseOption
		return ret
	}
	return o.RejectOptions
}

// GetRejectOptionsOk returns a tuple with the RejectOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionCallSpecInput) GetRejectOptionsOk() ([]ResponseOption, bool) {
	if o == nil || IsNil(o.RejectOptions) {
		return nil, false
	}
	return o.RejectOptions, true
}

// HasRejectOptions returns a boolean if a field has been set.
func (o *FunctionCallSpecInput) HasRejectOptions() bool {
	if o != nil && !IsNil(o.RejectOptions) {
		return true
	}

	return false
}

// SetRejectOptions gets a reference to the given []ResponseOption and assigns it to the RejectOptions field.
func (o *FunctionCallSpecInput) SetRejectOptions(v []ResponseOption) {
	o.RejectOptions = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionCallSpecInput) GetState() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionCallSpecInput) GetStateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.State) {
		return map[string]interface{}{}, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FunctionCallSpecInput) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given map[string]interface{} and assigns it to the State field.
func (o *FunctionCallSpecInput) SetState(v map[string]interface{}) {
	o.State = v
}

func (o FunctionCallSpecInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionCallSpecInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fn"] = o.Fn
	toSerialize["kwargs"] = o.Kwargs
	if o.Channel.IsSet() {
		toSerialize["channel"] = o.Channel.Get()
	}
	if o.RejectOptions != nil {
		toSerialize["reject_options"] = o.RejectOptions
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

func (o *FunctionCallSpecInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fn",
		"kwargs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionCallSpecInput := _FunctionCallSpecInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFunctionCallSpecInput)

	if err != nil {
		return err
	}

	*o = FunctionCallSpecInput(varFunctionCallSpecInput)

	return err
}

type NullableFunctionCallSpecInput struct {
	value *FunctionCallSpecInput
	isSet bool
}

func (v NullableFunctionCallSpecInput) Get() *FunctionCallSpecInput {
	return v.value
}

func (v *NullableFunctionCallSpecInput) Set(val *FunctionCallSpecInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionCallSpecInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionCallSpecInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionCallSpecInput(val *FunctionCallSpecInput) *NullableFunctionCallSpecInput {
	return &NullableFunctionCallSpecInput{value: val, isSet: true}
}

func (v NullableFunctionCallSpecInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionCallSpecInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
