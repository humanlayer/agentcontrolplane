/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humanlayerapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FunctionCallOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionCallOutput{}

// FunctionCallOutput struct for FunctionCallOutput
type FunctionCallOutput struct {
	RunId  string                     `json:"run_id"`
	CallId string                     `json:"call_id"`
	Spec   FunctionCallSpecOutput     `json:"spec"`
	Status NullableFunctionCallStatus `json:"status,omitempty"`
}

type _FunctionCallOutput FunctionCallOutput

// NewFunctionCallOutput instantiates a new FunctionCallOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionCallOutput(runId string, callId string, spec FunctionCallSpecOutput) *FunctionCallOutput {
	this := FunctionCallOutput{}
	this.RunId = runId
	this.CallId = callId
	this.Spec = spec
	return &this
}

// NewFunctionCallOutputWithDefaults instantiates a new FunctionCallOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionCallOutputWithDefaults() *FunctionCallOutput {
	this := FunctionCallOutput{}
	return &this
}

// GetRunId returns the RunId field value
func (o *FunctionCallOutput) GetRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value
// and a boolean to check if the value has been set.
func (o *FunctionCallOutput) GetRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunId, true
}

// SetRunId sets field value
func (o *FunctionCallOutput) SetRunId(v string) {
	o.RunId = v
}

// GetCallId returns the CallId field value
func (o *FunctionCallOutput) GetCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *FunctionCallOutput) GetCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *FunctionCallOutput) SetCallId(v string) {
	o.CallId = v
}

// GetSpec returns the Spec field value
func (o *FunctionCallOutput) GetSpec() FunctionCallSpecOutput {
	if o == nil {
		var ret FunctionCallSpecOutput
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *FunctionCallOutput) GetSpecOk() (*FunctionCallSpecOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *FunctionCallOutput) SetSpec(v FunctionCallSpecOutput) {
	o.Spec = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionCallOutput) GetStatus() FunctionCallStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret FunctionCallStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionCallOutput) GetStatusOk() (*FunctionCallStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *FunctionCallOutput) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableFunctionCallStatus and assigns it to the Status field.
func (o *FunctionCallOutput) SetStatus(v FunctionCallStatus) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *FunctionCallOutput) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *FunctionCallOutput) UnsetStatus() {
	o.Status.Unset()
}

func (o FunctionCallOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionCallOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["run_id"] = o.RunId
	toSerialize["call_id"] = o.CallId
	toSerialize["spec"] = o.Spec
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

func (o *FunctionCallOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"run_id",
		"call_id",
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionCallOutput := _FunctionCallOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFunctionCallOutput)

	if err != nil {
		return err
	}

	*o = FunctionCallOutput(varFunctionCallOutput)

	return err
}

type NullableFunctionCallOutput struct {
	value *FunctionCallOutput
	isSet bool
}

func (v NullableFunctionCallOutput) Get() *FunctionCallOutput {
	return v.value
}

func (v *NullableFunctionCallOutput) Set(val *FunctionCallOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionCallOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionCallOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionCallOutput(val *FunctionCallOutput) *NullableFunctionCallOutput {
	return &NullableFunctionCallOutput{value: val, isSet: true}
}

func (v NullableFunctionCallOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionCallOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
