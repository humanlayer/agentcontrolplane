/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package humanlayerapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EmailRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRecipient{}

// EmailRecipient struct for EmailRecipient
type EmailRecipient struct {
	Address          string         `json:"address"`
	ContextAboutUser NullableString `json:"context_about_user,omitempty"`
	Field            NullableField  `json:"field,omitempty"`
}

type _EmailRecipient EmailRecipient

// NewEmailRecipient instantiates a new EmailRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRecipient(address string) *EmailRecipient {
	this := EmailRecipient{}
	this.Address = address
	return &this
}

// NewEmailRecipientWithDefaults instantiates a new EmailRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRecipientWithDefaults() *EmailRecipient {
	this := EmailRecipient{}
	return &this
}

// GetAddress returns the Address field value
func (o *EmailRecipient) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *EmailRecipient) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *EmailRecipient) SetAddress(v string) {
	o.Address = v
}

// GetContextAboutUser returns the ContextAboutUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailRecipient) GetContextAboutUser() string {
	if o == nil || IsNil(o.ContextAboutUser.Get()) {
		var ret string
		return ret
	}
	return *o.ContextAboutUser.Get()
}

// GetContextAboutUserOk returns a tuple with the ContextAboutUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailRecipient) GetContextAboutUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContextAboutUser.Get(), o.ContextAboutUser.IsSet()
}

// HasContextAboutUser returns a boolean if a field has been set.
func (o *EmailRecipient) HasContextAboutUser() bool {
	if o != nil && o.ContextAboutUser.IsSet() {
		return true
	}

	return false
}

// SetContextAboutUser gets a reference to the given NullableString and assigns it to the ContextAboutUser field.
func (o *EmailRecipient) SetContextAboutUser(v string) {
	o.ContextAboutUser.Set(&v)
}

// SetContextAboutUserNil sets the value for ContextAboutUser to be an explicit nil
func (o *EmailRecipient) SetContextAboutUserNil() {
	o.ContextAboutUser.Set(nil)
}

// UnsetContextAboutUser ensures that no value is present for ContextAboutUser, not even an explicit nil
func (o *EmailRecipient) UnsetContextAboutUser() {
	o.ContextAboutUser.Unset()
}

// GetField returns the Field field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailRecipient) GetField() Field {
	if o == nil || IsNil(o.Field.Get()) {
		var ret Field
		return ret
	}
	return *o.Field.Get()
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailRecipient) GetFieldOk() (*Field, bool) {
	if o == nil {
		return nil, false
	}
	return o.Field.Get(), o.Field.IsSet()
}

// HasField returns a boolean if a field has been set.
func (o *EmailRecipient) HasField() bool {
	if o != nil && o.Field.IsSet() {
		return true
	}

	return false
}

// SetField gets a reference to the given NullableField and assigns it to the Field field.
func (o *EmailRecipient) SetField(v Field) {
	o.Field.Set(&v)
}

// SetFieldNil sets the value for Field to be an explicit nil
func (o *EmailRecipient) SetFieldNil() {
	o.Field.Set(nil)
}

// UnsetField ensures that no value is present for Field, not even an explicit nil
func (o *EmailRecipient) UnsetField() {
	o.Field.Unset()
}

func (o EmailRecipient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if o.ContextAboutUser.IsSet() {
		toSerialize["context_about_user"] = o.ContextAboutUser.Get()
	}
	if o.Field.IsSet() {
		toSerialize["field"] = o.Field.Get()
	}
	return toSerialize, nil
}

func (o *EmailRecipient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailRecipient := _EmailRecipient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailRecipient)

	if err != nil {
		return err
	}

	*o = EmailRecipient(varEmailRecipient)

	return err
}

type NullableEmailRecipient struct {
	value *EmailRecipient
	isSet bool
}

func (v NullableEmailRecipient) Get() *EmailRecipient {
	return v.value
}

func (v *NullableEmailRecipient) Set(val *EmailRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRecipient(val *EmailRecipient) *NullableEmailRecipient {
	return &NullableEmailRecipient{value: val, isSet: true}
}

func (v NullableEmailRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
